"""https://www.hackerrank.com/contests/projecteuler/challenges/euler011/problem

The sequence of triangle numbers is generated by adding the natural numbers.  So the 7th triangle number
would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28

THe first ten terms would be 1, 3,6, 10, 15, 21, 28, 36, 45, 55, ...

28 is the first triangle number to have over five divisors (with 6).

What is the value of the first triangle number to have over N divisors?

1 <= number of test cases <= 10
1 <= N <= 1000

"""

from typing import Iterator, Set
from itertools import count
from math import sqrt
import sys
sys.stdin = open(__file__.replace('.py', ' - Inputs.txt'))  # Simulate inputs from stdin - remove this on Hackerrank


def triangular_numbers() -> Iterator[int]:
    """
    returns an Iterator of all triangular numbers
    """
    num = 0
    for natural in count(1):
        num += natural
        yield num


def factors(num: int) -> Set[int]:
    """
    return a set of ints which are factors of num
    """
    facts = set()
    for test_fact in range(1, int(sqrt(num)) + 1):
        if num % test_fact == 0:
            facts.add(test_fact)
            facts.add(num // test_fact)
    return facts


# noinspection PyDefaultArgument
def first_triangle_num_w_divisors(n: int, cache={}, tri_nums=triangular_numbers()) -> int:
    """
    return the first triangle number having more than n divisors
    """
    while n > len(cache):
        try_num = next(tri_nums)
        n_of_facts = len(factors(try_num))
        for new_cache in range(len(cache) + 1, n_of_facts):
            cache[new_cache] = try_num
    return cache[n]


if __name__ == '__main__':
    for _ in range(int(input())):
        boom = int(input())
        print(boom, first_triangle_num_w_divisors(boom), sep='\t')
