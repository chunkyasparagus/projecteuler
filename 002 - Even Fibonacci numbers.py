"""https://www.hackerrank.com/contests/projecteuler/challenges/euler002/problem

This problem is a programming version of Problem 2 from projecteuler.net

Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the
first  terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89,...

By considering the terms in the Fibonacci sequence whose values do not exceed N, find the sum of the even-valued terms.

Input Format

First line contains T that denotes the number of test cases. This is followed by T lines, each containing an integer, N.

Constraints
1 <= T <= 10 ^ 5
1 <= N <= 4 * 10 ^ 16


Output Format

Print the required answer for each test case.

Sample Input 0

2
10
100

Sample Output 0

10
44

Explanation 0

For N = 10, we have {2, 8}, sum is 10.
For N = 100, we have {2, 8, 34}, sum is 44.
"""

from typing import Iterator
import sys
sys.stdin = open(__file__.replace('.py', ' - Inputs.txt'))  # Simulate inputs from stdin - remove this on Hackerrank


def fibonacci(f0: int = 0, f1: int = 1) -> Iterator:
    """
    Generic Fibonacci generator using seeds f0 and f1 as the first two items
    :param f0: the first item in the series
    :param f1: the second item in the series
    :return: an Iterator outputting all values in the series
    """
    t1, t2 = f0, f1
    yield t1
    yield t2
    while True:
        t1, t2 = t2, t1 + t2
        yield t2


def fibonacci_to_limit(limit: int) -> Iterator:
    """
    Fibonacci generator for fibonacci(0, 1) which stops when the next returned item would exceed limit
    :param limit: the upper limit for returned values
    :return: Iterator returning all values in the series
    """
    fib = fibonacci()
    num = next(fib)
    while num <= limit:
        yield num
        num = next(fib)


if __name__ == '__main__':
    #  the following is provided by HackerRank
    t = int(input().strip())
    for a0 in range(t):
        n = int(input().strip())
        #  the following is my own
        print(sum(num for num in fibonacci_to_limit(n) if num % 2 == 0))
